const {test,expect} = require('@playwright/test')
const{loginPage} = require('../../pages/login.page')
const{dashboardPage} = require('../../pages/dashboard.page')
const{prodcutssidebarPage} = require('../../pages/Products/productssidebar.page')
const{storeproducts} =require('../../pages/Products/storeproducts.page')
const staticData = require('../../data/staticData')
const exp = require('constants')

test('Store Products Validation', async ({page}) =>{
    const login = new loginPage(page)
    const dashboard = new dashboardPage(page)
    const products = new prodcutssidebarPage(page)
    const store = new storeproducts(page)
    await login.gotoLoginPage()
    login.Login (staticData.email,staticData.password)
    await expect(dashboard.page).toHaveURL(staticData.dashboardUrl)
    await products.ProductsDownButton()
    await store.NavToStoreProducts()
    await expect(store.page).toHaveURL(staticData.storeproductsUrl)
    await expect(store.storeHeading).toBeVisible()
    const conceptName ='SUKU'
    await store.selectConcept(conceptName)
    const selectedConcept = await store.getSelectedConceptValue()
    await expect(selectedConcept).toBe('13')
    await store.selectStatus('true')
    await store.ClearFilter()
    const entriesOption = await page.textContent(store.showEntry)
    await expect (entriesOption).toContain('10')
    await expect (entriesOption).toContain('25')
    await expect (entriesOption).toContain('50')
    await expect (entriesOption).toContain('100')
    await store.ShowingEntries()
    await store.TableHead()
    await store.BodyHead()
    await store.Search('test')


})